(ns haincanter)
(ns hoincanter)
(use '(incanter core io))
(def ds (read-dataset  "TIME_MONITOR_2013-12-18.csv" :header true) )
view ds
(def ds (read-dataset  "TIME_MONITOR_2013-12-18.csv" :header true :delim ';') )
(def ds (read-dataset  "TIME_MONITOR_2013-12-18.csv" :header true :delim ';) )
(def ds (read-dataset  "TIME_MONITOR_2013-12-18.csv" :header true :delim \;) )
view ds
(nrow ds)
(view ($ q
(use '(incanter core io))
(def ds (read-dataset  "TIME_MONITOR_2013-12-18.csv" :header true :delim \;) )
(view ds)
(nrow ds)
(mean ds)
(view ($ :duration ds))
(def ds (read-dataset  "TIME_MONITOR_2013-12-18.csv" :header true :delim \;) )
(view ($ :duration ds))
(def ds2 (read-dataset  "TIME_MONITOR_2013-12-18.csv" :header true :delim \;) )
(view ds2)
(view ($ :duration ds2))
(mean ($ :duration ds2)
)
(sd ($ :duration ds2)
)
(ns hoincanter)
(mean ($ :duration ds2))
(view (time-series-plot :time :duration :data ds2))
(view ds2)
(use '(incanter core io))
(view ds2)
(def ds (read-dataset  "TIME_MONITOR_2013-12-18.csv" :header true :delim \;) )
(view ds)
(mean ($ :duration ds))
($ :duration ds)
(count ($ :duration ds)à)
(count ($ :duration ds))
(mean ($ :duration ds))
(sd ($ :duration ds))
(use '(incanter core io stats))
(mean ($ :duration ds))
(sd ($ :duration ds))
(sum ($ :duration ds))
(view ($where {:duration {:$ne ni} } ds))
(view ($where {:duration {:$ne 'nil'} } ds))
(use '(incanter core io stats)
)
(def ds (read-dataset  "TIME_MONITOR_2013-12-18.csv" :header true :delim \;) )
(view ds)
(view ($ :duration ds))
(mean ($ :duration ds))
(summary ($ :duration ds))
(summary ds)
(def ds20 (read-dataset  "TIME_MONITOR_2013-12-20.csv" :header true :delim \;) )
(summary ds20)
(quantile ($ :duration ds) :probs[0])
(view  ($where {:s "RS_OW_City"} ds20))
(view  ($where {:servicename "RS_OW_City"} ds20))
(def ds20ADS  ($where {:servicename "RS_OW_City"} ds20)))
(def ds20ADS  ($where {:servicename "RS_OW_City"} ds20))
(time-series-plot :time :duration :data ds20ADS)
(use '(incanter core io stats charts)
)
(time-series-plot :time :duration :data ds20ADS)
(histogram  :duration :data ds20ADS)
(view (histogram  :duration :data ds20ADS))
(view (histogram  :duration :data ds20))
(view (bar-chart :servicename :duration :vertical false :data  ($rollup count :duration :servicename ds20)))
(def ds20nonADS  ($where {:not {:servicename "RS_OW_City"}} ds20))
(view ds20nonADS)
(def ds20nonADS  ($where {:ne :servicename "RS_OW_City"} ds20))
(view ds20nonADS)
(def ds20nonADS  ($where {:servicename {:ne "RS_OW_City"}} ds20))
(view ds20nonADS)
(def ds20nonADS  ($where {:servicename {:ne "RS_OW_AgencyDataSupplierService"}} ds20))
(view ds20nonADS)
(view (bar-chart :servicename :duration :vertical false :data  ($rollup count :duration :servicename ds20nonADS)))
(def ds20long  ($where {:duration {:gt 40}} ds20))
(view (bar-chart :servicename :duration :vertical false :data  ($rollup count :duration :servicename ds20long)))
(view ds20nonADS)
(use '(incanter core io stats charts))
(use '(incanter core io stats chart))
(use '(incanter core io stats charts))
(with-data ds 
(mean %data)(sd %data))
(mean $data)(sd $data))
(with-data ($ :duration ds)
(mean $data)(sd $data))
(mean $data) (sd $data))
(with-data ($ :duration ds)
(mean $data) (sd $data))
(with-data ($ :duration ds)
(print (mean $data))  (print (sd $data)))
(with-data ($ :duration ds)
[ (mean $data))  (print (sd $data)])
(with-data ($ :duration ds)
[ (mean $data) (sd $data) ] )
(with-data ($ :duration ds)
[ (count $data) (mean $data) (sd $data) ] )
(defn q [p serie] (quantile serie :probs [p])) 
(q 0 ($ :duration ds))
(keys ($groups-by ds))
(keys ($groupsby ds))
(keys ($groupby ds))
(keys ($group-by ds))
($group-by ds)
ds
($group-by :servicename  ds)
(keys ($group-by :servicename  ds))
(keys ($group-by :servicename  ds20))
(view (pie-chart :duration :data ds20))
(view (pie-chart :servicename :duration :data ds20))
(view (bar-chart :servicename :duration :data ds20))
(view (bar-chart :duration :servicename :data ds20))
(view (pie-chart :servicename :duration :data ds20))
(view (historgram  :duration :data ds20))
(view (histogram  :duration :data ds20))
($rollup count :duration :servicename ds20)
(type ($rollup count :duration :servicename ds20))
($group-by :servicename ds20))
($group-by :servicename ds20)
($group-by dslong)
($group-by :servicename dslong)
(def dslong  ($where {:duration {:gt 40}} ds20)
)
($group-by :servicename dslong)
(mean  ($where {:servicename "RS_OW_City"} dslon))
(mean  ($where {:servicename "RS_OW_City"} dslong))
(mean :duration  ($where {:servicename "RS_OW_City"} dslong))
(mean ($ :duration  ($where {:servicename "RS_OW_City"} dslong)))
 ($ :duration  ($where {:servicename "RS_OW_City"} dslong))
(mean  ($ :duration  ($where {:servicename "RS_OW_City"} dslong)))
(count  ($ :duration  ($where {:servicename "RS_OW_City"} dslong)))
(mean (toSet ($ :duration  ($where {:servicename "RS_OW_City"} dslong))))
(mean (toList ($ :duration  ($where {:servicename "RS_OW_City"} dslong))))
(count  ($ :duration  ($where {:servicename "RS_OW_City"} dslong)))
(mean  ($ :duration  ($where {:servicename "RS_OW_City"} dslong)))
(count  ($ :duration  ($where {:servicename "RS_OW_AgencyDataSupplierService"} dslong)))
(mean  ($ :duration  ($where {:servicename "RS_OW_AgencyDataSupplierService"} dslong)))
($group-by :servicename dslong)
(get "RS_OW_AgencyDataSupplierService"  ($group-by :servicename dslong))
(key "RS_OW_AgencyDataSupplierService"  ($group-by :servicename dslong))
(get ($group-by :servicename dslong) "RS_OW_AgencyDataSupplierService ")
(get ($group-by :servicename dslong) "RS_OW_AgencyDataSupplierService")
(find ($group-by :servicename dslong) "RS_OW_AgencyDataSupplierService")
(find ($group-by :servicename dslong) :RS_OW_AgencyDataSupplierService)
(find ($group-by :servicename dslong) 'RS_OW_AgencyDataSupplierService')
(find ($group-by :servicename dslong22) 'RS_OW_AgencyDataSupplierService')
(find ($group-by :servicename dslong) 'RS_OW_AgencyDataSupplierService')
 ($group-by :servicename dslong) 
(get  ($group-by :servicename dslong {:servicename "RS_OW_AgencyDataSupplierService"} ) 
)
(get  ($group-by :servicename dslong) {:servicename "RS_OW_AgencyDataSupplierService"} ) 
(view (pie-chart :servicename :duration :vertical false :data  ($rollup count :duration :servicename dslong)))
(use 'midje.repl)
(autotest)
(autotest
(use 'midje.repl'
)
(use 'midje.repl)
(autotest)
(use 'midje.repl)
(autotest)
(use 'midje.repl)
(autotest)
(q 0 [1 2 3])
(ns hoincanter)
(q 0 [1 2 3])
(use 'midje.repl)
(autotest)
(use 'hoincanter.core)
(q 0 [ 1 2 3 ])
(re-seq #"(\d*) (.*)" "12 ab") 
(str-to-long "12")
(use 'hoincanter.core)
(str-to-long "12")
(pst *me)
(pst *m
)
(autotest)
(parse-file  'resources/sample.log' (parse-line time-pattern build-reading ◊ )
)
(partial parse-line time-pattern) time-to-reading) 
(def parse-line)
(parse-line)
(doc parse-line)
(partial parseline time-pattern)
(partial parse-line time-pattern)
(doc (partial parse-line time-pattern))
(type  (partial parse-line time-pattern))
(partial parse-line time-pattern)
((partial parse-line time-pattern))
(class (partial parse-line time-pattern))
(str (class (partial parse-line time-pattern)))
(class parse-file)
(class parse-line)
(def f1 (partial parse-line))
(class f1)
(:arglists (meta parse-line))
(:arglists (meta #'parse-line))
(:arglists (meta #'f1))
(:arglists f1)
(meta #'parse-line)
(meta #'f1)
(meta f1)
(meta #'f1)
(meta #'(apply f1))
(meta #f1)
(meta #'(f1))
(meta (#'f1))
extract-data "resources/sample.log"
(ns hoincanter)
extract-data "resources/sample.log"
(extract-data "resources/sample.log")
(extract-data 'resources/sample.log')
doc
d
(to-dataset
'resources/sample.log')
(ns)
(use 'midje.repl)
(autotest)
(ns
hoincanter))
(use 'hoincanter.core)
(to-dataset 'resources/sample.log')
(to-dataset "resources/sample.log")
(time-series-plot :duration (to-dataset "resources/sample.log"))
(use (incanter core io charts stats)
)
(use '(incanter core io charts stats))
(use [incanter.charts])
(use '(incanter charts))
(time-series-plot :duration (to-dataset "resources/sample.log"))
(time-series-plot :duration :data (to-dataset "resources/sample.log"))
(time-series-plot :timestamp :duration :data (to-dataset "resources/sample.log"))
(histogram :duration :data (to-dataset "resources/sample.log"))
(view (histogram :duration :data (to-dataset "resources/sample.log")))
(view (to-dataset "resources/sample.log"))
(use '(incanter core io))
(use '(incanter core))
(ns)
(use '(incanter core))
(use 'midje.repl)
(autotest)
(use 'hoincanter)
(use 'hoincanter.core)
(view (convert-to-dataset "resources/sample.log"))
(use '(incanter io))
(view (convert-to-dataset "resources/sample.log"))
(nrow (convert-to-dataset "resources/sample.log"))
(use '(incanter io core charts stats))
(nrow (convert-to-dataset "resources/sample.log"))
(view (convert-to-dataset "resources/sample.log"))
(histogram (convert-to-dataset "resources/sample.log"))
(histogram :duration (convert-to-dataset "resources/sample.log"))
(histogram :duration :data (convert-to-dataset "resources/sample.log"))
(view (histogram :duration :data (convert-to-dataset "resources/sample.log")))
(view (time-series-plot :timestamp :duration :data (convert-to-dataset "resources/sample.log")))
(use '(cljtime core coerse)
))
(use '(cljtime core coerse))
(use '(clj-time core coerse))
(use '(clj-time core coerce))
(from-date 2013 02 01 14 05)
(date-time 2013 02 01 14 05)
(def d (date-time 2013 02 01 14 05))
d
(to-long d)
(to-long "2013-12-19 08:00:01,004")
(to-long "2013-12-19T08:00:01,004")
(to-long (date-time 2013 12 19 08 00 01 004))
(to-long (date-time 2013 12 19 8 0 1 004))
(replace "A B" " " "T")
(replace "A B" #" " "T")
(str/replace "A B" #" " "T")
(clojure.string/replace "A B" #" " "T")
(clojure.string/replace "H M" #" " "T")
 (use 'clj-time.format)
(def custom-formatter (formatter "yyyyMMdd HHmmss,SSS"))
(parse custom-formatter "2013-12-19 08:00:01,004")
(def custom-formatter2 (formatter "yyyyMMdd HHmmss','SSS"))
(parse custom-formatter2 "2013-12-19 08:00:01,004")
(def custom-formatter2 (formatter "yyyy-MM-dd HH:mm:ss,SSS"))
(parse custom-formatter2 "2013-12-19 08:00:01,004")
(to-long (parse custom-formatter2 "2013-12-19 08:00:01,004"))
(to-long (parse custom-formatter2 "2013-12-13 08:00:00,924"))
(view (convert-to-dataset "resources/sample.log")
)
(use '(incanter core io stats charts))
(ns step3)
(use 'hoincanter.core)
(ns step4)
(use 'hoincanter.core)
(ns step1)
(use 'hoincanter.core)
(view (convert-to-dataset "resources/sample.log"))
(use '(incanter core io stats charts))
(view (convert-to-dataset "resources/sample.log"))
(ns step2)
(use 'hoincanter.core)
(use '(incanter core io stats charts))
(view (convert-to-dataset "resources/sample.log"))
(meta #'readings-to-dataset)
(meta #'build-reading)
 (convert-to-dataset "resources/sample.log")
(use 'hoincanter.core)
(use '(incanter core io stats charts)
)
(convert-to-dataset "resources/sample.log")
(view (convert-to-dataset "resources/sample.log"))
(time-series-plot :ts :duration  :data (convert-to-dataset "resources/sample.log"))
((time-series-plot :ts :duration  :data (convert-to-dataset "resources/sample.log")))
(view (time-series-plot :ts :duration  :data (convert-to-dataset "resources/sample.log")))
(view (time-series-plot :ts :duration  :data (convert-to-dataset "../logs/TIME_MONITOR_2013-12-20.log")))
(view (time-series-plot :ts :duration  :data (convert-to-dataset "resources/TIME_MONITOR_2013-12-20.log")))
(view (time-series-plot :ts :duration  :data (convert-to-dataset "resources/TIME_MONITOR_2013-12-18.log")))
(view (time-series-plot :ts :duration  :data (convert-to-dataset "../logs/TIME_MONITOR_2013-12-18.log")))
(view (time-series-plot :ts :duration  :data (convert-to-dataset "../logs/TIME_MONITOR_2013-12-20.log")))
(use 'hoincanter.core)
(use '(incanter core io stats charts))
(view (convert-to-dataset "../logs/TIME_MONITOR_2013-12-20-clean.log"))
(view (time-series-plot :ts :duration :data (convert-to-dataset "../logs/TIME_MONITOR_2013-12-20-clean.log")))
